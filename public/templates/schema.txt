NEWSCHEMA('SCHEMA_NAME', function(schema) {

	schema.action('list', {
		name: 'List',
		action: function($) {

			// if (UNAUTHORIZED($))
			// 	return;

			DB().list('TABLE').autoquery($.query, 'id:uid,dtcreated:date,dtupdated:date', null, 'dtcreated_desc', 100).where('isremoved=FALSE').callback($.callback);
		}
	});

	schema.action('read', {
		name: 'Read',
		params: '*id:UID',
		action: async function($) {

			// if (UNAUTHORIZED($))
			// 	return;

			var params = $.params;
			var db = DB();
			var item = await db.read('TABLE').fields('id,name,dtcreated').id(params.id).where('isremoved=FALSE').error(404).promise($);

			$.callback(item);

		}
	});

	schema.action('create', {
		name: 'Create',
		action: async function($, model) {

			// if (UNAUTHORIZED($))
			// 	return;

			var id = UID();
			model.id = id;
			model.dtcreated = NOW;

			var db = DB();
			await db.insert('TABLE', model).promise($);

			$.success(model.id);

		}
	});

	schema.action('update', {
		name: 'Update',
		params: '*id:UID',
		action: async function($, model) {

			// if (UNAUTHORIZED($))
			// 	return;

			var params = $.params;
			model.dtupdated = NOW;

			var db = DB();
			await db.modify('TABLE', model).id(params.id).where('isremoved=FALSE').error(404).promise($);

			$.success(params.id);
		}
	});

	schema.action('remove', {
		name: 'Remove',
		params: '*id:UID',
		action: async function($) {

			// if (UNAUTHORIZED($))
			// 	return;

			var params = $.params;

			var db = DB();
			await db.modify('TABLE', { isremoved: true, dtupdated: NOW }).id(params.id).where('isremoved=FALSE').error(404).promise($);

			$.success(params.id);
		}
	});

});
